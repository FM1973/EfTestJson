// <auto-generated />
using System;
using EfTestJson.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EfTestJson.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240423062224_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EfTestJson.Poll", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset?>("End")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("Start")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Polls", (string)null);
                });

            modelBuilder.Entity("EfTestJson.Poll", b =>
                {
                    b.OwnsMany("EfTestJson.PollCategory", "Categories", b1 =>
                        {
                            b1.Property<Guid>("PollId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<Guid>("CategoryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Order")
                                .HasColumnType("int");

                            b1.HasKey("PollId", "Id");

                            b1.ToTable("Polls");

                            b1.ToJson("Categories");

                            b1.WithOwner()
                                .HasForeignKey("PollId");

                            b1.OwnsMany("EfTestJson.PollTask", "Tasks", b2 =>
                                {
                                    b2.Property<Guid>("PollCategoryPollId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("PollCategoryId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<int>("Order")
                                        .HasColumnType("int");

                                    b2.Property<string>("Placeholder")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<bool>("SetByAdmin")
                                        .HasColumnType("bit");

                                    b2.Property<Guid>("TaskId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("TaskType")
                                        .HasColumnType("int");

                                    b2.Property<DateTimeOffset?>("TodoUntil")
                                        .HasColumnType("datetimeoffset");

                                    b2.Property<string>("Tooltip")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("PollCategoryPollId", "PollCategoryId", "Id");

                                    b2.ToTable("Polls");

                                    b2.ToJson("Tasks");

                                    b2.WithOwner()
                                        .HasForeignKey("PollCategoryPollId", "PollCategoryId");

                                    b2.OwnsMany("EfTestJson.PollTaskUser", "TasksUsers", b3 =>
                                        {
                                            b3.Property<Guid>("PollTaskPollCategoryPollId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<int>("PollTaskPollCategoryId")
                                                .HasColumnType("int");

                                            b3.Property<int>("PollTaskId")
                                                .HasColumnType("int");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int");

                                            b3.Property<DateTimeOffset?>("CreationDate")
                                                .HasColumnType("datetimeoffset");

                                            b3.Property<DateTimeOffset?>("LastUpdate")
                                                .HasColumnType("datetimeoffset");

                                            b3.Property<decimal>("Percent")
                                                .HasPrecision(18, 2)
                                                .HasColumnType("decimal(18,2)");

                                            b3.Property<string>("Text")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<Guid>("UserId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<string>("UserName")
                                                .IsRequired()
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("PollTaskPollCategoryPollId", "PollTaskPollCategoryId", "PollTaskId", "Id");

                                            b3.ToTable("Polls");

                                            b3.ToJson("TasksUsers");

                                            b3.WithOwner()
                                                .HasForeignKey("PollTaskPollCategoryPollId", "PollTaskPollCategoryId", "PollTaskId");
                                        });

                                    b2.Navigation("TasksUsers");
                                });

                            b1.Navigation("Tasks");
                        });

                    b.Navigation("Categories");
                });
#pragma warning restore 612, 618
        }
    }
}
